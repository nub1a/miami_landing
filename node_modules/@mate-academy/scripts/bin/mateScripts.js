#!/usr/bin/env node

"use strict";function t(t){return t&&"object"==typeof t&&"default"in t?t.default:t}var s=require("commander"),e=require("child_process"),i=require("fs"),o=t(i),n=t(require("path")),r=t(require("fs-extra")),a=t(require("open"));const c="@mate-academy/scripts";var l="0.8.8";function p(t,s=!0,i=process.cwd()){let o={stdio:"ignore"};s&&(o={stdio:"inherit",cwd:i});const n=e.execSync(t,o);return n?n.toString():n}function h(t,s=!0){try{return p(t,s)}catch(t){process.exit(1)}}const m={shouldBindStdout:!0,cwd:process.cwd()};function u(t,s=m){const{shouldBindStdout:i=!0,cwd:o}=s;return new Promise((s,n)=>{const r={cwd:o},a=e.exec(t,r);let c="";i&&(a.stdout&&a.stdout.on("data",t=>{c+=t.toString(),console.log(t)}),a.stderr&&a.stderr.on("data",t=>{console.error(t)})),a.on("close",e=>{e>0?n(new Error(`${t}, errorCode: ${e}`)):s(c)})})}var g;!function(t){t.None="none",t.Layout="layout",t.LayoutDOM="layoutDOM",t.Javascript="javascript",t.Typescript="typescript",t.React="react",t.ReactTypescript="reactTypescript"}(g||(g={}));const d={projectType:g.None,linters:{html:!0,bem:!0,styles:!0,javascript:!0}};function y(t){return t.includes("package.json")}function w(t){if("test"===process.env.NODE_ENV)return!0;let s;try{const e=o.readFileSync(n.join(t,"package.json"),{encoding:"utf-8"});s=JSON.parse(e)}catch(t){s=null}return s&&s.devDependencies&&s.devDependencies["@mate-academy/scripts"]}function j(t){return"/"===t}function f(t){return Object.entries(t).filter(([,t])=>"boolean"!=typeof t||t).reduce((t,[s,e])=>`${t} --${s}${"boolean"==typeof e?"":" "+e}`,"")}class D{constructor(t){this.versionString=t,this.validate();const[s,e,i]=this.getParts();this.major=s,this.minor=e,this.patch=i}static fromVersionString(t){return new D(t)}static fromVersionList(t){const s=this.getVersionStringFromVersionList(t);return new D(s)}isHigher(t){return!t||(this.major>t.major||!(this.major<t.major)&&(this.minor>t.minor||!(this.minor<t.minor)&&(this.patch>t.patch||(this.patch,t.patch,!1))))}static getVersionStringFromVersionList(t){return(s=t.split("@"))[s.length-1];var s}validate(){const t=this.versionString.split(".");3!==t.length&&D.throwSemverError();t.every(t=>!Number.isNaN(Number(t)))||D.throwSemverError()}getParts(){return this.versionString.split(".").map(Number)}static throwSemverError(){throw new Error("Semver should contain 3 numbers divided with point(.)")}}var S,v,R,b,k,P,T;class O{constructor(t){this.logNoImplementationWarning=()=>{console.warn(`No implementation for command ${this.constructor.name} for ${this.config.projectType} project`)},this[S]=this.logNoImplementationWarning,this[v]=this.logNoImplementationWarning,this[R]=this.logNoImplementationWarning,this[b]=this.logNoImplementationWarning,this[k]=this.logNoImplementationWarning,this[P]=this.logNoImplementationWarning,this[T]=this.logNoImplementationWarning,this.rootDir=t,this.config=function(t){const{mateAcademy:s}=JSON.parse(o.readFileSync(n.join(t,"package.json"),{encoding:"utf-8"})),e=s||{},i=e.linters||{};return{...d,...e,linters:{...d.linters,...i}}}(t)}async run(t){this.checkProjectType();try{await this.common(t),await this[this.config.projectType](t)}catch(t){process.exit(1)}}checkProjectType(){this.config.projectType===g.None&&O.logProjectTypeWarning()}static logProjectTypeWarning(){console.warn('package.json should contain\n{\n  ...\n  "mateAcademy": {\n    "projectType": "layout" | "javascript" | "react" | "reactTypescript" | "typescript" | "layoutDOM"\n  }\n}\n')}child(t){return new t(this.rootDir)}}S=g.None,v=g.Layout,R=g.LayoutDOM,b=g.Javascript,k=g.Typescript,P=g.React,T=g.ReactTypescript;class N{constructor(t){return this.rootDir=t,this.configPath=n.join(this.rootDir,"./backstopConfig.js"),this.dataDir=n.join(this.rootDir,"backstop_data"),this.referencesDir=n.join(this.dataDir,"bitmaps_reference"),this.testResultsDir=n.join(this.dataDir,"bitmaps_test"),this.reportDir=this.dataDir,N.__instance||(N.__instance=this),N.__instance}test(){r.existsSync(this.configPath)&&(this.ensureReferences(),this.cleanTestResults(),N.run("test",{config:this.configPath}))}ensureReferences(){this.areReferencesExists()||this.loadReferences()}areReferencesExists(){return r.existsSync(this.referencesDir)}cleanTestResults(){r.removeSync(this.testResultsDir)}loadReferences(){r.existsSync(this.configPath)&&(this.cleanReference(),N.run("reference",{config:this.configPath}))}cleanReference(){r.removeSync(this.referencesDir)}static run(t,s){h(`npx backstop ${t} ${f(s)}`)}}class E{constructor(t){this.rootDir=t,this.baseOptions={"out-dir":n.join(this.rootDir,"dist")},this.source=n.join(this.rootDir,"src/index.html")}serve({showLogs:t,open:s}){const e={...this.baseOptions,open:s,port:8080};this.run("serve",e,"development",t)}build(t=!1){const s={...this.baseOptions,"public-url":"./"};this.run("build",s,"production",t)}run(t,s,e="development",i=!1){const o=f(s),n=`cross-env NODE_ENV=${e} npx parcel ${t} ${E.escapePathSpaces(this.source)} ${o}`;i&&console.log(n),p(n,i)}static escapePathSpaces(t){return t.replace(" ","\\ ")}}class L{once(){return p("npx jest ./")}watch(){return p("npx jest ./ --watch")}}const C={envs:{local:!0,global:!1},silent:!1},x={isGlobal:!1,versionString:"",silent:!1};class I{constructor(t){this.packageName=t}async ensure({envs:t=C.envs,silent:s=C.silent}=C){const e=await this.getVersions();t.local&&!e.local&&await this.install({silent:s}),t.global&&!e.global&&await this.install({silent:s,isGlobal:!0})}async update({envs:t=C.envs,silent:s=C.silent}=C){const e=await this.getVersions();t.local&&e.available.isHigher(e.local)&&await this.install({silent:s}),t.global&&e.available.isHigher(e.global)&&await this.install({silent:s,isGlobal:!0})}async install({isGlobal:t=x.isGlobal,versionString:s=x.versionString,silent:e=x.silent}=x){let i=s;if(!i){i=(await this.getVersions()).available.versionString}if(!e){const s=await this.getVersions(),e=s[t?"global":"local"];console.log(`Update ${t?"global":"local"} ${this.packageName} from ${(null==e?void 0:e.versionString)||'"none"'} to ${s.available.versionString}`)}await u(`npm i ${t?"-g":""} ${this.packageName}@${i}`,{shouldBindStdout:!1})}async getVersions(){return this._versions||await this.setVersions(),this._versions}async setVersions(){const[t,s,e]=await Promise.all([this.getAvailableVersion(),this.getGlobalVersion(),this.getLocalVersion()]);this._versions={available:t,global:s,local:e}}async getAvailableVersion(){const t=await u(`npm view ${this.packageName} version`);return D.fromVersionString(t)}async getGlobalVersion(){return this.getInstalledVersion(!0)}async getLocalVersion(){return this.getInstalledVersion()}async getInstalledVersion(t=!1,s=0){try{const e=await u(`npm ls ${t?"-g":""} --deps=${s} ${this.packageName} version`);return D.fromVersionList(e)}catch(t){return null}}}let $=(()=>{class t extends O{constructor(t){super(t),this.gitHooksDestinationDir=n.join(this.rootDir,"./.git/hooks"),this.layout=async()=>{this.copyGitIgnore(g.Layout),this.copyProjectTypeSpecificConfigs(g.Layout),this.initGitHooks(g.Layout),await this.ensureCrossEnvInstalled()},this.layoutDOM=async()=>{this.copyGitIgnore(g.LayoutDOM),this.copyProjectTypeSpecificConfigs(g.LayoutDOM),this.initGitHooks(g.LayoutDOM),await this.ensureCrossEnvInstalled()},this.javascript=()=>{this.copyGitIgnore(g.Javascript),this.copyProjectTypeSpecificConfigs(g.Javascript),this.initGitHooks(g.Javascript)},this.crossEnvPackageService=new I("cross-env")}common(){this.copyCommonConfigs()}copyCommonConfigs(){const s=n.join(t.configsDir,"common");r.copySync(s,this.rootDir)}copyGitIgnore(s){const e=".gitignore";r.copySync(n.join(t.configsDir,"gitignoreTemplates",".gitignore."+s),n.join(this.rootDir,e)),console.log(".gitignore copied")}copyProjectTypeSpecificConfigs(s){const e=n.join(t.configsDir,s);r.copySync(e,this.rootDir),console.log(s+" specific configs copied")}initGitHooks(s){const e=n.join(t.gitHooksSourceDir,s);r.readdirSync(e).forEach(t=>this.initGitHook(e,t)),console.log("Git hooks installed")}initGitHook(t,s){const e=n.join(t,s),i=n.join(this.gitHooksDestinationDir,s);r.copySync(e,i),console.log(`Git ${s} hook installed`)}async ensureCrossEnvInstalled(){await this.crossEnvPackageService.ensure({silent:!1}),console.log("Cross-env installed")}}return t.configsDir=n.join(__dirname,"../configs"),t.gitHooksSourceDir=n.join(t.configsDir,"git-hooks"),t})();class V extends O{constructor(t){super(t),this.layout=t=>{const{html:s,bem:e,files:i,styles:o,javascript:n}=t,{linters:r}=this.config;s&&r.html&&V.lintHtml(i),e&&r.bem&&V.lintBem(i),o&&r.styles&&V.lintStyles(i),n&&r.javascript&&V.lintJs(i)},this.layoutDOM=t=>{this.layout(t)},this.javascript=t=>{const{javascript:s,files:e}=t;s&&V.lintJs(e)}}common(t){}static lintHtml(t){h("npx linthtml "+(t?t.join(" "):"./src/**/*.html"))}static lintBem(t){h("npx bemlint "+(t?t.join(" "):"./src"))}static lintStyles(t){h("npx stylelint "+(t?t.join(" "):"./src/**/*.css ./src/**/*.scss"))}static lintJs(t){h("npx eslint "+(t?t.join(" "):"./src"))}}class M{constructor(t){this.rootDir=t,this.shouldOpen=!0,this.shouldShowLogs=!1,this.reportsDir=n.join(this.rootDir,"reports"),this.rawReportsDir=n.join(this.rootDir,"raw_reports"),this.mergedReport=n.join(this.reportsDir,"report.json")}async run(t){this.processOptions(t),this.log("CYPRESS RUN CALLED",t),await this.cleanPrevReports(),this.log("OLD REPORTS REMOVED");let s=!1;try{this.log("RUN CYPRESS"),await this.runCypress(),this.log("CYPRESS TESTS RUN SUCCESS")}catch(t){this.log("CYPRESS TESTS RUN FAIL",t),s=!0}finally{const t=await this.prepareReports();this.log("TEST REPORTS PREPARED",t),t&&this.shouldOpen?(this.log("OPEN REPORTS IN BROWSER"),await this.openReportInBrowser()):this.log("SKIP OPEN REPORTS IN BROWSER ACCORDING"),s&&process.exit(1)}}processOptions(t={}){const{showLogs:s=!1,open:e=!0}=t;this.shouldOpen=e,this.shouldShowLogs=s}async cleanPrevReports(){await Promise.all([this.cleanReports(),this.cleanRawReports()])}async cleanReports(){await r.remove(this.reportsDir)}async cleanRawReports(){await r.remove(this.rawReportsDir)}runCypress(){return u("npx cypress run",{shouldBindStdout:this.shouldShowLogs})}async prepareReports(){return await this.hasRawReports()?(await this.makeReportsDir(),await this.mergeReports(),await this.generateHtmlReport(),await this.cleanRawReports(),!0):(this.log("REPORTS WAS NOT CREATED DURING TEST RUN. SKIP REPORTS PREPARING"),await this.cleanRawReports(),!1)}async hasRawReports(){if(!await r.pathExists(this.rawReportsDir))return!1;return(await r.readdir(this.rawReportsDir)).length>0}async makeReportsDir(){await r.mkdir(this.reportsDir)}async mergeReports(){const t=n.join(this.rawReportsDir,"*.json");await u(`npx mochawesome-merge "${t}" > ${this.mergedReport}`,{shouldBindStdout:this.shouldShowLogs})}async generateHtmlReport(){await u(`npx marge -o ${this.reportsDir} ${this.mergedReport}`,{shouldBindStdout:this.shouldShowLogs})}async openReportInBrowser(){await a("file://"+n.join(this.reportsDir,"report.html"))}log(t,s){this.shouldShowLogs&&(s?console.log(t,s):console.log(t))}}class G extends O{constructor(){super(...arguments),this.parcel=new E(this.rootDir),this.layout=t=>{r.removeSync(n.join(this.rootDir,"dist")),this.parcel.build(t.shouldShowInternalLogs)},this.layoutDOM=t=>{this.layout(t)}}common(){}}let _=(()=>{class t extends O{constructor(){super(...arguments),this.layout=async()=>{await u("npm i -D @mate-academy/scripts");const s=await this.getPackage();s.scripts=t.scripts.layout,delete s["lint-staged"],delete s.husky,await i.promises.writeFile(n.join(this.rootDir,"package.json"),JSON.stringify({...s,...t.mateConfig.layout},null,2)),await Promise.all([t.safeRun(r.copy(n.join(this.rootDir,"config/backstop/backstopConfig.js"),n.join(this.rootDir,"backstopConfig.js"))),t.safeRun(r.remove(n.join(this.rootDir,"config"))),t.safeRun(r.remove(n.join(this.rootDir,"server.js"))),t.safeRun(r.remove(n.join(this.rootDir,".travis.yml"))),t.safeRun(r.remove(n.join(this.rootDir,"gulpfile.js"))),t.safeRun(r.remove(n.join(this.rootDir,".linthtmlrc")))]),await u("npm rm @linthtml/gulp-linthtml gulp-autoprefixer gulp-clean gulp-eslint gulp-replace-path gulp-sass gulp-sourcemaps gulp-stylelint gulp @mate-academy/browsersync-config htmllint htmllint-cli husky lint-staged rimraf @mate-academy/htmllint-config"),await u("npm i -D @linthtml/linthtml stylelint-scss @mate-academy/linthtml-config node-sass parcel"),await u("npm i")},this.layoutDOM=async()=>{const s=await this.getPackage();await i.promises.writeFile(n.join(this.rootDir,"package.json"),JSON.stringify({...s,...t.mateConfig.layoutDOM},null,2)),await u("npm rm backstopjs @mate-academy/backstop-config gulp-htmllint"),await u("rm -rf "+n.join(this.rootDir,"backstopConfig.js")),await u("npm i -D cypress eslint-plugin-cypress mochawesome mochawesome-merge mochawesome-report-generator"),await u("mkdir "+n.join(this.rootDir,"cypress")),await u("mkdir "+n.join(this.rootDir,"cypress","integration")),await u(`cp ${n.join(__dirname,"../","configs","custom",g.LayoutDOM,"page.spec.js")} ${n.join(this.rootDir,"cypress","integration","page.spec.js")}`),await u("npm i")},this.javascript=async()=>{await u("npm i -D @mate-academy/scripts");const s=await this.getPackage();s.scripts=t.scripts.javascript,delete s["lint-staged"],delete s.husky,await i.promises.writeFile(n.join(this.rootDir,"package.json"),JSON.stringify({...s,...t.mateConfig.javascript},null,2)),await t.safeRun(r.remove(n.join(this.rootDir,".travis.yml"))),await u("npm rm husky lint-staged"),await u("npm i"),await u("npx eslint ./ --fix")},this.react=()=>{},this.reactTypescript=()=>{}}async common(t){await this[t.projectType]()}async getPackage(){const t=await r.readFile(n.join(this.rootDir,"package.json"),{encoding:"utf-8"});return JSON.parse(t)}static async safeRun(t){try{await t}catch(t){console.error("Migration error",t)}return!0}}return t.scripts={layout:{init:"mate-scripts init",start:"mate-scripts start",lint:"mate-scripts lint","test:only":"mate-scripts test",build:"mate-scripts build",deploy:"mate-scripts deploy",update:"mate-scripts update",postinstall:"npm run update",test:"npm run lint && npm run test:only"},javascript:{init:"mate-scripts init",start:"mate-scripts start",lint:"mate-scripts lint","test:only":"mate-scripts test",update:"mate-scripts update",postinstall:"npm run update",test:"npm run lint && npm run test:only"}},t.mateConfig={[g.None]:null,[g.Layout]:{mateAcademy:{projectType:g.Layout}},[g.LayoutDOM]:{mateAcademy:{projectType:g.LayoutDOM}},[g.Javascript]:{mateAcademy:{projectType:g.Javascript}},[g.React]:{mateAcademy:{projectType:g.React}},[g.ReactTypescript]:{mateAcademy:{projectType:g.ReactTypescript}},[g.Typescript]:{mateAcademy:{projectType:g.Typescript}}},t})();const B=new s.Command,H=new class{constructor(){this.rootDir=function(){let t=process.cwd(),s=o.readdirSync(t);try{for(;!y(s)||!w(t);){if(j(t))throw new Error("Command should be run inside project folder with @mate-academy/scripts as devDependency");t=n.join(t,"../"),s=o.readdirSync(t)}}catch(s){console.error(s.message),t=process.cwd()}return t}()}make(t,s,e=!1){const i=new t(e?process.cwd():this.rootDir);return s?(...t)=>{const e=t.pop(),o=s(e,...t);return i.run(o)}:()=>i.run()}};B.name("mate-scripts").version(l,"-v --version","output current version"),B.command("init").description("init linters and configs").action(H.make($)),B.command("start").option("-l, --logs","show internal commands logs",!1).option("-o, --open","open web browser after start",!0).description("run development server").action(H.make(class extends O{constructor(){super(...arguments),this.parcel=new E(this.rootDir),this.jest=new L,this.layout=t=>{this.parcel.serve({showLogs:t.shouldShowInternalLogs,open:t.open})},this.layoutDOM=t=>{this.layout(t)},this.javascript=()=>{this.jest.watch()}}common(){}},t=>{const{logs:s,open:e}=t;return{shouldShowInternalLogs:s,open:e}})),B.command("lint [files...]").option("-s, --styles","lint styles only",!1).option("-h, --html","lint html (markup-style) only",!1).option("-b, --bem","lint html (BEM) only",!1).option("-j, --javascript","lint javascript only",!1).description("lint html, css and js files").action(H.make(V,(t,s)=>{const{styles:e,html:i,bem:o,javascript:n}=t,r=s&&s.length?s:null;return e||i||n||o?{styles:e,html:i,bem:o,javascript:n,files:r}:{styles:!0,html:!0,bem:!0,javascript:!0,files:r}})),B.command("test").option("-n, --not-open","should open test report in browser",!1).option("-l, --logs","should log details to console during run",!1).description("run tests").action(H.make(class extends O{constructor(){super(...arguments),this.backstop=new N(this.rootDir),this.jest=new L,this.cypress=new M(this.rootDir),this.layout=()=>{this.backstop.test()},this.layoutDOM=t=>{this.cypress.run(t)},this.javascript=()=>{this.jest.once()},this.typescript=()=>{this.jest.once()}}common(){}},t=>{const{"not-open":s,logs:e}=t;return{open:!s,showLogs:e}})),B.command("build").description("create production ready build").option("-l, --logs","show internal commands logs",!1).action(H.make(G)),B.command("deploy").option("-l, --logs","show internal commands logs",!1).description("deploy application to gh-pages").action(H.make(class extends O{constructor(){super(...arguments),this.buildCommand=this.child(G),this.destinationDir=n.join(this.rootDir,"dist"),this.packageDir=n.join(this.rootDir,"node_modules","@mate-academy","scripts"),this.deployScriptFile=n.join(this.packageDir,"bash-scripts","deploy-layout.sh"),this.backstop=new N(this.rootDir),this.layout=async t=>{await this.setShellRunner();const{shouldShowInternalLogs:s}=t;await this.buildCommand.run({shouldShowInternalLogs:s}),console.log("Start deploy to gh-pages. Please wait, it may take up to minute.\n");try{this.copyHtmlReport(),this.commitBuild(s),this.runDeployBashScript(s),console.log("[32mSuccessfully deployed to gh-pages!\n[0m")}catch(t){console.error("[31mDeploy error: ",t.message,"[0m")}},this.layoutDOM=async t=>{await this.setShellRunner();const{shouldShowInternalLogs:s}=t;await this.buildCommand.run({shouldShowInternalLogs:s}),console.log("Start deploy to gh-pages. Please wait, it may take up to minute.\n");try{this.runDeployBashScript(s),console.log("[32mSuccessfully deployed to gh-pages!\n[0m")}catch(t){console.error("[31mDeploy error: ",t.message,"[0m")}}}common(t){}async setShellRunner(){try{await u("sh --version",{shouldBindStdout:!1}),this.shellRunner="sh"}catch(t){try{await u("bash --version",{shouldBindStdout:!1}),this.shellRunner="bash"}catch(t){try{await u("zsh --version",{shouldBindStdout:!1}),this.shellRunner="zsh"}catch(t){console.error('[31mDeploy skipped\nPlease run deploy in "Git bash" terminal',"[0m"),process.exit(0)}}}}copyHtmlReport(){try{r.copySync(n.join(this.backstop.reportDir),n.join(this.destinationDir,"./report"))}catch(t){console.error("[33mWarning: No html_report[0m")}}commitBuild(t){p(`git add ${this.destinationDir} -f`,t),p('git commit -m "make build" --no-verify',t)}runDeployBashScript(t){p(`${this.shellRunner} ${this.deployScriptFile} dist`,t,this.rootDir)}},t=>{const{logs:s}=t;return{shouldShowInternalLogs:s}})),B.command("update").description("update @mate-academy/scripts").action(H.make(class extends O{constructor(t){super(t),this.layout=()=>{},this.layoutDOM=()=>{},this.javascript=()=>{},this.react=()=>{},this.reactTypescript=()=>{},this.mateScriptsPackageService=new I(c)}async common(){await this.updateMateScriptsVersions(),console.log("versions updated successfully"),p("npx mate-scripts init"),console.log("init command success")}async updateMateScriptsVersions(){await this.mateScriptsPackageService.update({envs:{global:!0,local:!0}})}})),B.command("migrate <type>").description("(global) migrate project to @mate-academy/scripts").action(H.make(_,(t,s)=>({projectType:s}),!0)),B.parse(process.argv);
